{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aa45c66c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 251 클래스, 객체, 인스턴스\n",
    "\n",
    "# 클래스, 객체, 인스턴스에 대해 설명해봅시다.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "235f8f7d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 252 클래스 정의\n",
    "\n",
    "# 비어있는 사람 (Human) 클래스를 \"정의\" 해보세요.\n",
    "\n",
    "class Human:\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "071506c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 253 인스턴스 생성\n",
    "\n",
    "# 사람 (Human) 클래스의 인스턴스를 \"생성\" 하고 이를 areum 변수로 바인딩해보세요.\n",
    "\n",
    "class Human:\n",
    "    pass \n",
    "\n",
    "areum = Human()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fb799502",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "응애응애\n"
     ]
    }
   ],
   "source": [
    "# 254 클래스 생성자-1\n",
    "\n",
    "# 사람 (Human) 클래스에 \"응애응애\"를 출력하는 생성자를 추가하세요.\n",
    "\n",
    "class Human:\n",
    "    print(\"응애응애\")\n",
    "    \n",
    "aruem = Human()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "fe94e79e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "선아\n"
     ]
    }
   ],
   "source": [
    "# 255 클래스 생성자-2\n",
    "\n",
    "# 사람 (Human) 클래스에 (이름, 나이, 성별)을 받는 생성자를 추가하세요.\n",
    "\n",
    "\n",
    "class Human:\n",
    "    def __init__(self, name, age, sex):\n",
    "        self.name = name\n",
    "        self.age = age\n",
    "        self.sex = sex\n",
    "        \n",
    "aruem = Human(\"선아\",\"25\",\"여자\")\n",
    "print(aruem.name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "5b3b959f",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'self' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_32/1858609281.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      9\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msex\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"이름: {} 나이: {} 성별: {}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'self' is not defined"
     ]
    }
   ],
   "source": [
    "# 256 인스턴스 속성에 접근\n",
    "\n",
    "# 255에서 생성한 인스턴스의 이름, 나이, 성별을 출력하세요. 인스턴스 변수에 접근하여 값을 출력하면 됩니다.\n",
    "\n",
    "print('이름:{name},나이:{age},성별:{sex}'.foramt(name='조아름',age = 25 , sex='여자'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "23f4f606",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "이름: 아름 나이: 25 성별: 여자\n"
     ]
    }
   ],
   "source": [
    "# 257 클래스 메소드 - 1\n",
    "\n",
    "# 사람 (Human) 클래스에서 이름, 나이, 성별을 출력하는 who() 메소드를 추가하세요.\n",
    "\n",
    "class Human:\n",
    "    def __init__(self, name, age, sex):\n",
    "        self.name = name\n",
    "        self.age = age\n",
    "        self.sex = sex\n",
    "           \n",
    "    def who(self):\n",
    "        print(\"이름: {} 나이: {} 성별: {}\".format(self.name, self.age, self.sex))\n",
    "        \n",
    "areum = Human(\"아름\",25,\"여자\")\n",
    "areum.who()\n",
    "\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "2d6fd0f4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "이름: 모름 나이: 0 성별: 모름\n",
      "이름: 아름 나이: 25 성별: 여자\n"
     ]
    }
   ],
   "source": [
    "# 258 클래스 메소드 - 2\n",
    "\n",
    "# 사람 (Human) 클래스에 (이름, 나이, 성별)을 받는 setInfo 메소드를 추가하세요\n",
    "\n",
    "class Human:\n",
    "    def __init__(self, name, age, sex):\n",
    "        self.name = name\n",
    "        self.age = age\n",
    "        self.sex = sex\n",
    "           \n",
    "    def who(self):\n",
    "        print(\"이름: {} 나이: {} 성별: {}\".format(self.name, self.age, self.sex))\n",
    "    \n",
    "    def setInfo(self,name,age,sex):\n",
    "        self.name = name\n",
    "        self.age = age\n",
    "        self.sex = sex\n",
    "        \n",
    "\n",
    "areum = Human(\"모름\",0,\"모름\")\n",
    "areum.who()\n",
    "\n",
    "areum.setInfo(\"아름\",25,\"여자\")\n",
    "areum.who()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "02f298eb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "나의 죽음을 알리지 말라\n"
     ]
    }
   ],
   "source": [
    "# 259 클래스 소멸자\n",
    "\n",
    "# 사람 (human) 클래스에 \"나의 죽음을 알리지 말라\"를 출력하는 소멸자를 추가하세요.\n",
    "\n",
    "class Human:\n",
    "    def __init__(self, name, age, sex):\n",
    "        self.name = name\n",
    "        self.age = age\n",
    "        self.sex = sex\n",
    "           \n",
    "    def who(self):\n",
    "        print(\"이름: {} 나이: {} 성별: {}\".format(self.name, self.age, self.sex))\n",
    "    \n",
    "    def setInfo(self,name,age,sex):\n",
    "        self.name = name\n",
    "        self.age = age\n",
    "        self.sex = sex\n",
    "        \n",
    "    def __del__(self):\n",
    "        print(\"나의 죽음을 알리지 말라\")\n",
    "                \n",
    "areum = Human(\"아름\", 25, \"여자\")\n",
    "del areum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14f2d8a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "260 에러의 원인\n",
    "\n",
    "아래와 같은 에러가 발생한 원인에 대해 설명하세요.\n",
    "\n",
    "class OMG : \n",
    "    def print() :\n",
    "        print(\"Oh my god\")\n",
    "\n",
    ">>> >>> myStock = OMG()\n",
    ">>> myStock.print()\n",
    "\n",
    "# 출력이 겹쳐서?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "eb4fcdac",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 261 Stock 클래스 생성\n",
    "\n",
    "# 주식 종목에 대한 정보를 저장하는 Stock 클래스를 정의해보세요. 클래스는 속성과 메서드를 갖고 있지 않습니다.\n",
    "\n",
    "class Stock():\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "a3abce0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 262 생성자\n",
    "\n",
    "# Stock 클래스의 객체가 생성될 때 종목명과 종목코드를 입력 받을 수 있도록 생성자를 정의해보세요.\n",
    "\n",
    "class Stock:\n",
    "    def __init__(self,name,code): \n",
    "        self.name = name\n",
    "        self.code = code\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "227b18aa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "종목:삼성전자\n"
     ]
    }
   ],
   "source": [
    "# 263 메서드\n",
    "\n",
    "# 객체에 종목명을 입력할 수 있는 set_name 메서드를 추가해보세요.\n",
    "\n",
    "class Stock:\n",
    "    def __init__(self,name,code): \n",
    "        self.name = name\n",
    "        self.code = code\n",
    "        \n",
    "    def set_name(self,name):\n",
    "        self.name = name\n",
    "        print(\"종목:{}\".format(self.name))\n",
    "        \n",
    "a = Stock(None, None)\n",
    "a.set_name(\"삼성전자\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "4e5b06bf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "코드:005930\n"
     ]
    }
   ],
   "source": [
    "# 264 메서드\n",
    "\n",
    "# 객체에 종목코드를 입력할 수 있는 set_code 메서드를 추가해보세요.\n",
    "\n",
    "class Stock:\n",
    "    def __init__(self,name,code): \n",
    "        self.name = name\n",
    "        self.code = code\n",
    "        \n",
    "    def set_name(self,name):\n",
    "        self.name = name\n",
    "        print(\"종목:{}\".format(self.name))\n",
    "    \n",
    "    def set_code(self,code):\n",
    "        self.code = code\n",
    "        print(\"코드:{}\".format(self.code))\n",
    "        \n",
    "a = Stock(None, None)\n",
    "a.set_code(\"005930\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "7f481528",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "삼성전자\n",
      "005930\n",
      "<__main__.Stock object at 0x7f78918853a0>\n",
      "<__main__.Stock object at 0x7f78918853a0>\n"
     ]
    }
   ],
   "source": [
    "# 265 메서드\n",
    "\n",
    "# 종목명과 종목코드를 리턴하는 get_name, get_code 메서드를 추가하세요. \n",
    "# 해당 메서드를 사용하여 종목명과 종목코드를 얻고 이를 출력해보세요.\n",
    "\n",
    "class Stock:\n",
    "    def __init__(self,name,code): \n",
    "        self.name = name\n",
    "        self.code = code\n",
    "        \n",
    "    def set_name(self,name):\n",
    "        self.name = name\n",
    "        print(\"종목:{}\".format(self.name))\n",
    "    \n",
    "    def set_code(self,code):\n",
    "        self.code = code\n",
    "        print(\"코드:{}\".format(self.code))\n",
    "    \n",
    "    def get_name(name):\n",
    "\n",
    "        return name\n",
    "        \n",
    "    def get_code(code):\n",
    "\n",
    "        return code\n",
    "        \n",
    "삼성 = Stock(\"삼성전자\", \"005930\")\n",
    "print(삼성.name)\n",
    "print(삼성.code)\n",
    "print(삼성.get_name())\n",
    "print(삼성.get_code())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "dff67496",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 266 객체의 속성값 업데이트\n",
    "\n",
    "# 생성자에서 종목명, 종목코드, PER, PBR, 배당수익률을 입력 받을 수 있도록 생성자를 수정하세요.\n",
    "# PER, PBR, 배당수익률은 float 타입입니다.\n",
    "\n",
    "class Stock:\n",
    "    def __init__(self,name,code,PER, PBR,배당수익률): \n",
    "        self.name = name\n",
    "        self.code = code\n",
    "        self.PER = PER\n",
    "        self.PBR = PBR\n",
    "        self.배당수익률 = 배당수익률\n",
    "        \n",
    "    def set_name(self,name):\n",
    "        self.name = name\n",
    "        print(\"종목:{}\".format(self.name))\n",
    "    \n",
    "    def set_code(self,code):\n",
    "        self.code = code\n",
    "        print(\"코드:{}\".format(self.code))\n",
    "    \n",
    "    def get_name(name):\n",
    "\n",
    "        return name\n",
    "        \n",
    "    def get_code(code):\n",
    "\n",
    "        return code\n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "e9d67ec7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "삼성전자\n",
      "005930\n",
      "15.79\n",
      "1.33\n",
      "2.83\n"
     ]
    }
   ],
   "source": [
    "# 267 객체 생성\n",
    "\n",
    "# 266번에서 정의한 생성자를 통해 다음 정보를 갖는 객체를 생성해보세요.\n",
    "\n",
    "class Stock:\n",
    "    def __init__(self,name,code,PER, PBR,배당수익률): \n",
    "        self.name = name\n",
    "        self.code = code\n",
    "        self.PER = PER\n",
    "        self.PBR = PBR\n",
    "        self.배당수익률 = 배당수익률\n",
    "        \n",
    "    def set_name(self,name):\n",
    "        self.name = name\n",
    "        \n",
    "    \n",
    "    def set_code(self,code):\n",
    "        self.code = code\n",
    "        \n",
    "    def set_PER(self,PER):\n",
    "        self.PER = PER\n",
    "        \n",
    "    def set_PBR(self,PBR):\n",
    "        self.PBR = PBR\n",
    "    \n",
    "    def set_배당수익률(self,배당수익률):\n",
    "        self.배당수익률 = 배당수익률\n",
    "        \n",
    "    \n",
    "    def get_name(name):\n",
    "\n",
    "        return name\n",
    "        \n",
    "    def get_code(code):\n",
    "\n",
    "        return code\n",
    "    \n",
    "    def get_PER(PER):\n",
    "\n",
    "        return PER\n",
    "        \n",
    "    def get_PBR(PBR):\n",
    "\n",
    "        return PBR\n",
    "    \n",
    "    def get_배당수익률(배당수익률):\n",
    "\n",
    "        return 배당수익률\n",
    "\n",
    "a = Stock(\"삼성전자\",\"005930\",15.79,1.33,2.83)\n",
    "print(a.name)\n",
    "print(a.code)\n",
    "print(a.PER)\n",
    "print(a.PBR)\n",
    "print(a.배당수익률)\n",
    "# print(a.get_name())\n",
    "# print(a.get_code())\n",
    "# print(a.get_PER())\n",
    "# print(a.get_PBR())\n",
    "# print(a.get_배당수익률())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "01997485",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 268 객체의 속성 수정\n",
    "\n",
    "# PER, PBR, 배당수익률은 변경될 수 있는 값입니다. \n",
    "# 이 값을 변경할 때 사용하는 set_per, set_pbr, set_dividend 메서드를 추가하세요.\n",
    "\n",
    "class Stock:\n",
    "    def __init__(self,name,code,PER, PBR,배당수익률): \n",
    "        self.name = name\n",
    "        self.code = code\n",
    "        self.PER = PER\n",
    "        self.PBR = PBR\n",
    "        self.배당수익률 = 배당수익률\n",
    "        \n",
    "    def set_name(self,name):\n",
    "        self.name = name\n",
    "        \n",
    "    \n",
    "    def set_code(self,code):\n",
    "        self.code = code\n",
    "        \n",
    "    def set_PER(self,PER):\n",
    "        self.PER = PER\n",
    "        \n",
    "    def set_PBR(self,PBR):\n",
    "        self.PBR = PBR\n",
    "    \n",
    "    def set_배당수익률(self,배당수익률):\n",
    "        self.배당수익률 = 배당수익률\n",
    "        \n",
    "    \n",
    "    def get_name(name):\n",
    "\n",
    "        return name\n",
    "        \n",
    "    def get_code(code):\n",
    "\n",
    "        return code\n",
    "    \n",
    "    def get_PER(PER):\n",
    "\n",
    "        return PER\n",
    "        \n",
    "    def get_PBR(PBR):\n",
    "\n",
    "        return PBR\n",
    "    \n",
    "    def get_배당수익률(배당수익률):\n",
    "\n",
    "        return 배당수익률"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "644ee528",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "삼성전자\n",
      "005930\n",
      "12.75\n",
      "1.33\n",
      "2.83\n"
     ]
    }
   ],
   "source": [
    "# 269 객체의 속성 수정\n",
    "\n",
    "# 267번에서 생성한 객체에 set_per 메서드를 호출하여 per 값을 12.75로 수정해보세요.\n",
    "\n",
    "class Stock:\n",
    "    def __init__(self,name,code,PER, PBR,배당수익률): \n",
    "        self.name = name\n",
    "        self.code = code\n",
    "        self.PER = PER\n",
    "        self.PBR = PBR\n",
    "        self.배당수익률 = 배당수익률\n",
    "        \n",
    "    def set_name(self,name):\n",
    "        self.name = name\n",
    "        \n",
    "    def set_code(self,code):\n",
    "        self.code = code\n",
    "        \n",
    "    def set_PER(self,PER):\n",
    "        self.PER = PER\n",
    "        \n",
    "    def set_PBR(self,PBR):\n",
    "        self.PBR = PBR\n",
    "    \n",
    "    def set_배당수익률(self,배당수익률):\n",
    "        self.배당수익률 = 배당수익률\n",
    "        \n",
    "    def get_name(name):\n",
    "\n",
    "        return name\n",
    "        \n",
    "    def get_code(code):\n",
    "\n",
    "        return code\n",
    "    \n",
    "    def get_PER(PER):\n",
    "\n",
    "        return PER\n",
    "        \n",
    "    def get_PBR(PBR):\n",
    "\n",
    "        return PBR\n",
    "    \n",
    "    def get_배당수익률(배당수익률):\n",
    "\n",
    "        return 배당수익률\n",
    "    \n",
    "a = Stock(\"삼성전자\", \"005930\", 15.79, 1.33, 2.83)\n",
    "a.set_PER(12.75)\n",
    "print(a.name)\n",
    "print(a.code)\n",
    "print(a.PER)\n",
    "print(a.PBR)\n",
    "print(a.배당수익률)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "ae0b0bf4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "종목명:삼성전자 종목코드:005930 PER:15.79 PBR:1.33 배당수익률:2.83\n",
      "종목명:현대차 종목코드:005380 PER:8.7 PBR:0.35 배당수익률:4.27\n",
      "종목명:LG전자 종목코드:066570 PER:317.34 PBR:0.69 배당수익률:1.37\n"
     ]
    }
   ],
   "source": [
    "# 270 여러 종목의 객체 생성\n",
    "\n",
    "\n",
    "# 아래의 표를 참조하여 3종목에 대해 객체를 생성하고 이를 파이썬 리스트에 저장하세요.\n",
    "# 파이썬 리스트에 저장된 각 종목에 대해 for 루프를 통해 종목코드와 PER을 출력해보세요.\n",
    "\n",
    "class Stock:\n",
    "    def __init__(self,name,code,PER, PBR,배당수익률): \n",
    "        self.name = name\n",
    "        self.code = code\n",
    "        self.PER = PER\n",
    "        self.PBR = PBR\n",
    "        self.배당수익률 = 배당수익률\n",
    "        \n",
    "   \n",
    "        \n",
    "    def set_name(self,name):\n",
    "        self.name = name\n",
    "        \n",
    "    def set_code(self,code):\n",
    "        self.code = code\n",
    "        \n",
    "    def set_PER(self,PER):\n",
    "        self.PER = PER\n",
    "        \n",
    "    def set_PBR(self,PBR):\n",
    "        self.PBR = PBR\n",
    "    \n",
    "    def set_배당수익률(self,배당수익률):\n",
    "        self.배당수익률 = 배당수익률\n",
    "        \n",
    "종목 = []\n",
    "\n",
    "종목.append(삼성)\n",
    "종목.append(현대)\n",
    "종목.append(LG)\n",
    "\n",
    "for i in 종목:\n",
    "        print(\"종목명:{} 종목코드:{} PER:{} PBR:{} 배당수익률:{}\".format(i.name, i.code, i.PER, i.PBR, i.배당수익률))\n",
    "            \n",
    "        \n",
    "삼성 = Stock(\"삼성전자\", \"005930\", 15.79, 1.33, 2.83)\n",
    "현대 = Stock(\"현대차\", \"005380\", 8.70, 0.35, 4.27)\n",
    "LG = Stock(\"LG전자\", \"066570\", 317.34, 0.69, 1.37)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "6124454d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "은행이름:SC은행\n",
      "계좌번호:111-11-111111\n"
     ]
    }
   ],
   "source": [
    "# 271 Account 클래스\n",
    "\n",
    "# 은행에 가서 계좌를 개설하면 은행이름, 예금주, 계좌번호, 잔액이 설정됩니다. \n",
    "# Account 클래스를 생성한 후 생성자를 구현해보세요. \n",
    "# 생성자에서는 예금주와 초기 잔액만 입력 받습니다. \n",
    "# 은행이름은 SC은행으로 계좌번호는 3자리-2자리-6자리 형태로 랜덤하게 생성됩니다.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "class Account:\n",
    "    def __init__(self,name,num):\n",
    "        self.name = name\n",
    "        self.num = num\n",
    "\n",
    "    \n",
    "    def set_name(self,name):\n",
    "        self.name = name\n",
    "        print(\"은행이름:{}\".format(self.name))\n",
    "        \n",
    "    def set_num(self,num):\n",
    "        self.num = num\n",
    "        print(\"계좌번호:{}\".format(self.num))\n",
    "        \n",
    "        \n",
    "a = Account(\"SC은행\",\"111-11-111111\")\n",
    "a.set_name(\"SC은행\")\n",
    "a.set_num(\"111-11-111111\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "49d93503",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "김민수\n",
      "100\n",
      "SC은행\n",
      "663-53-398661\n"
     ]
    }
   ],
   "source": [
    "# 271번\n",
    "\n",
    "import random\n",
    "\n",
    "class Account:\n",
    "    def __init__(self,name,잔액):\n",
    "        self.name = name\n",
    "        self.잔액 = 잔액\n",
    "        self.bank = \"SC은행\"\n",
    "\n",
    "        num1 = random.randint(0,999)\n",
    "        num2 = random.randint(0,99)\n",
    "        num3 = random.randint(0,999999)\n",
    "   \n",
    "        num1 = str(num1).zfill(3)\n",
    "        num2 = str(num2).zfill(2)\n",
    "        num3 = str(num3).zfill(6) \n",
    "        self.account_number = num1 +'-' + num2 +'-' + num3 \n",
    "    \n",
    "        \n",
    "a = Account(\"김민수\",\"100\")\n",
    "print(a.name)\n",
    "print(a.잔액)\n",
    "print(a.bank)\n",
    "print(a.account_number)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "d33b6827",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n"
     ]
    }
   ],
   "source": [
    "# 272 클래스 변수\n",
    "\n",
    "# 클래스 변수를 사용해서 Account 클래스로부터 생성된 계좌 객체의 개수를 저장하세요.\n",
    "\n",
    "import random\n",
    "\n",
    "\n",
    "class Account:\n",
    " \n",
    "    account_count = 0 \n",
    "    \n",
    "    def __init__(self,name,잔액):\n",
    "        self.name = name\n",
    "        self.잔액 = 잔액\n",
    "        self.bank = \"SC은행\"\n",
    "\n",
    "        num1 = random.randint(0,999)\n",
    "        num2 = random.randint(0,99)\n",
    "        num3 = random.randint(0,999999)\n",
    "   \n",
    "        num1 = str(num1).zfill(3)\n",
    "        num2 = str(num2).zfill(2)\n",
    "        num3 = str(num3).zfill(6) \n",
    "        self.account_number = num1 +'-' + num2 +'-' + num3 \n",
    "        \n",
    "        Account.account_count += 1\n",
    "        \n",
    "a = Account(\"김민수\",100)\n",
    "print(Account.account_count)\n",
    "lee = Account(\"이민수\",100)\n",
    "print(Account.account_count)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "809c7e87",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    }
   ],
   "source": [
    "# 273 클래스 변수 출력\n",
    "\n",
    "# Account 클래스로부터 생성된 계좌의 개수를 출력하는 get_account_num() 메서드를 추가하세요.\n",
    "\n",
    "import random\n",
    "\n",
    "\n",
    "class Account:\n",
    " \n",
    "    account_count = 0 \n",
    "    \n",
    "    def __init__(self,name,잔액):\n",
    "        self.name = name\n",
    "        self.잔액 = 잔액\n",
    "        self.bank = \"SC은행\"\n",
    "\n",
    "        num1 = random.randint(0,999)\n",
    "        num2 = random.randint(0,99)\n",
    "        num3 = random.randint(0,999999)\n",
    "   \n",
    "        num1 = str(num1).zfill(3)\n",
    "        num2 = str(num2).zfill(2)\n",
    "        num3 = str(num3).zfill(6) \n",
    "        self.account_number = num1 +'-' + num2 +'-' + num3 \n",
    "        \n",
    "        Account.account_count += 1\n",
    "        \n",
    "        \n",
    "    @classmethod   \n",
    "    def get_account_num(cls):\n",
    "        print(cls.account_count)\n",
    "        \n",
    "a = Account(\"김민수\",100)\n",
    "lee = Account(\"이민수\",100)\n",
    "a.get_account_num()\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b676b677",
   "metadata": {},
   "source": [
    "- @classmethod\n",
    "- 인스턴스를 만들지 않아도 class의 메서드를 바로 실행할 수 있다는 것이다.\n",
    "- classmethod는 cls가 있는데 이것은 '클래스'를 가리킨다. 이것으로 클래스의 어떤 속성에도 접근할 수 있다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "ea5500f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "김민수\n",
      "100\n",
      "SC은행\n",
      "358-39-156653\n",
      "500원이 입금 되었습니다\n"
     ]
    }
   ],
   "source": [
    "# 274 입금 메서드\n",
    "\n",
    "# Account 클래스에 입금을 위한 deposit 메서드를 추가하세요. 입금은 최소 1원 이상만 가능합니다.\n",
    "\n",
    "import random\n",
    "\n",
    "\n",
    "class Account:\n",
    " \n",
    "    account_count = 0 \n",
    "    \n",
    "    def __init__(self,name,잔액):\n",
    "        self.name = name\n",
    "        self.잔액 = 잔액\n",
    "        self.bank = \"SC은행\"\n",
    "\n",
    "        num1 = random.randint(0,999)\n",
    "        num2 = random.randint(0,99)\n",
    "        num3 = random.randint(0,999999)\n",
    "   \n",
    "        num1 = str(num1).zfill(3)\n",
    "        num2 = str(num2).zfill(2)\n",
    "        num3 = str(num3).zfill(6) \n",
    "        self.account_number = num1 +'-' + num2 +'-' + num3 \n",
    "        \n",
    "        Account.account_count += 1\n",
    "        \n",
    "        \n",
    "    @classmethod   \n",
    "    def get_account_num(cls):\n",
    "        print(cls.account_count)\n",
    "        \n",
    "    def deposit(self,num):\n",
    "        self.num = num\n",
    "        if num >= 1 :\n",
    "            self.잔액 += num\n",
    "            print(\"{}원이 입금 되었습니다\".format(self.num))\n",
    "        \n",
    "a = Account(\"김민수\",100)\n",
    "print(a.name)\n",
    "print(a.잔액)\n",
    "print(a.bank)\n",
    "print(a.account_number)\n",
    "a.deposit(500)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "7e294d93",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "김민수\n",
      "100\n",
      "SC은행\n",
      "795-14-753424\n",
      "500원이 입금 되었습니다\n",
      "200원이 출금되었습니다\n",
      "잔액:400\n"
     ]
    }
   ],
   "source": [
    "# 275 출금 메서드\n",
    "\n",
    "# Account 클래스에 출금을 위한 withdraw 메서드를 추가하세요. \n",
    "# 출금은 계좌의 잔고 이상으로 출금할 수는 없습니다.\n",
    "\n",
    "\n",
    "import random\n",
    "\n",
    "\n",
    "class Account:\n",
    " \n",
    "    account_count = 0 \n",
    "    \n",
    "    def __init__(self,name,잔액):\n",
    "        self.name = name\n",
    "        self.잔액 = 잔액\n",
    "        self.bank = \"SC은행\"\n",
    "\n",
    "        num1 = random.randint(0,999)\n",
    "        num2 = random.randint(0,99)\n",
    "        num3 = random.randint(0,999999)\n",
    "   \n",
    "        num1 = str(num1).zfill(3)\n",
    "        num2 = str(num2).zfill(2)\n",
    "        num3 = str(num3).zfill(6) \n",
    "        self.account_number = num1 +'-' + num2 +'-' + num3 \n",
    "        \n",
    "        Account.account_count += 1\n",
    "        \n",
    "        \n",
    "    @classmethod   \n",
    "    def get_account_num(cls):\n",
    "        print(cls.account_count)\n",
    "        \n",
    "    def deposit(self,in_num):\n",
    "        self.in_num = in_num\n",
    "        if in_num >= 1 :\n",
    "            self.잔액 += in_num\n",
    "            print(\"{}원이 입금 되었습니다\".format(self.in_num))\n",
    "            \n",
    "    def withdraw(self,out_num):\n",
    "        self.out_num = out_num\n",
    "        if self.잔액 > out_num:\n",
    "            self.잔액 -= out_num\n",
    "            print(\"{}원이 출금되었습니다\".format(out_num))\n",
    "        else:\n",
    "            print(\"잔액이 부족합니다\")\n",
    "        \n",
    "a = Account(\"김민수\",100)\n",
    "print(a.name)\n",
    "print(a.잔액)\n",
    "print(a.bank)\n",
    "print(a.account_number)\n",
    "a.deposit(500)\n",
    "a.withdraw(200)\n",
    "print(\"잔액:{}\".format(a.잔액))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "2ad7ddd4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "은행이름: SC은행\n",
      "예금주: 파이썬\n",
      "계좌번호: 351-53-168972\n",
      "잔고: 100\n",
      "500원이 입금 되었습니다\n",
      "200원이 출금되었습니다\n",
      "잔액:400\n"
     ]
    }
   ],
   "source": [
    "# 276 정보 출력 메서드\n",
    "\n",
    "# Account 인스턴스에 저장된 정보를 출력하는 display_info() 메서드를 추가하세요.\n",
    "# 잔고는 세자리마다 쉼표를 출력하세요.\n",
    "\n",
    "import random\n",
    "\n",
    "\n",
    "class Account:\n",
    " \n",
    "    account_count = 0 \n",
    "    \n",
    "    def __init__(self,name,잔액):\n",
    "        self.name = name\n",
    "        self.잔액 = 잔액\n",
    "        self.bank = \"SC은행\"\n",
    "\n",
    "        num1 = random.randint(0,999)\n",
    "        num2 = random.randint(0,99)\n",
    "        num3 = random.randint(0,999999)\n",
    "   \n",
    "        num1 = str(num1).zfill(3)\n",
    "        num2 = str(num2).zfill(2)\n",
    "        num3 = str(num3).zfill(6) \n",
    "        self.account_number = num1 +'-' + num2 +'-' + num3 \n",
    "        \n",
    "        Account.account_count += 1\n",
    "        \n",
    "        \n",
    "    @classmethod   \n",
    "    def get_account_num(cls):\n",
    "        print(cls.account_count)\n",
    "        \n",
    "    def deposit(self,in_num):\n",
    "        self.in_num = in_num\n",
    "        if in_num >= 1 :\n",
    "            self.잔액 += in_num\n",
    "            print(\"{}원이 입금 되었습니다\".format(self.in_num))\n",
    "            \n",
    "    def withdraw(self,out_num):\n",
    "        self.out_num = out_num\n",
    "        if self.잔액 > out_num:\n",
    "            self.잔액 -= out_num\n",
    "            print(\"{}원이 출금되었습니다\".format(out_num))\n",
    "        else:\n",
    "            print(\"잔액이 부족합니다\")\n",
    "            \n",
    "    def display_info(self):\n",
    "        print(\"은행이름:\", self.bank)\n",
    "        print(\"예금주:\", self.name)\n",
    "        print(\"계좌번호:\",self.account_number)\n",
    "        print(\"잔고:\", f\"{self.잔액:,}\")\n",
    "        \n",
    "    \n",
    "    \n",
    "a = Account(\"파이썬\",100)\n",
    "\n",
    "a.display_info()\n",
    "a.deposit(500)\n",
    "a.withdraw(200)\n",
    "print(\"잔액:{}\".format(a.잔액))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ea46f3f7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10000원이 입금 되었습니다\n",
      "10000원이 입금 되었습니다\n",
      "10000원이 입금 되었습니다\n",
      "5000원이 입금 되었습니다\n",
      "5000원이 입금 되었습니다\n",
      "50500.0\n"
     ]
    }
   ],
   "source": [
    "# 277 이자 지급하기\n",
    "\n",
    "# 입금 횟수가 5회가 될 때 잔고를 기준으로 1%의 이자가 잔고에 추가되도록 코드를 변경해보세요.\n",
    "\n",
    "import random\n",
    "\n",
    "\n",
    "class Account:\n",
    " \n",
    "    account_count = 0 \n",
    "    \n",
    "    def __init__(self,name,잔액):\n",
    "        self.deposit_count = 0 \n",
    "        self.name = name\n",
    "        self.잔액 = 잔액\n",
    "        self.bank = \"SC은행\"\n",
    "\n",
    "        num1 = random.randint(0,999)\n",
    "        num2 = random.randint(0,99)\n",
    "        num3 = random.randint(0,999999)\n",
    "   \n",
    "        num1 = str(num1).zfill(3)\n",
    "        num2 = str(num2).zfill(2)\n",
    "        num3 = str(num3).zfill(6) \n",
    "        self.account_number = num1 +'-' + num2 +'-' + num3 \n",
    "        \n",
    "        Account.account_count += 1\n",
    "        \n",
    "        \n",
    "    @classmethod   \n",
    "    def get_account_num(cls):\n",
    "        print(cls.account_count)\n",
    "        \n",
    "    def deposit(self,in_num):\n",
    "        self.in_num = in_num\n",
    "        if in_num >= 1 :\n",
    "            self.잔액 += in_num\n",
    "            print(\"{}원이 입금 되었습니다\".format(self.in_num))\n",
    "            \n",
    "            self.deposit_count += 1\n",
    "            if self.deposit_count % 5 == 0:\n",
    "                #이자 자금 \n",
    "                self.잔액 = (self.잔액 * 1.01)\n",
    "            \n",
    "    def withdraw(self,out_num):\n",
    "        self.out_num = out_num\n",
    "        if self.잔액 > out_num:\n",
    "            self.잔액 -= out_num\n",
    "            print(\"{}원이 출금되었습니다\".format(out_num))\n",
    "            \n",
    "        else:\n",
    "            print(\"잔액이 부족합니다\")\n",
    "            \n",
    "    def display_info(self):\n",
    "        print(\"은행이름:\", self.bank)\n",
    "        print(\"예금주:\", self.name)\n",
    "        print(\"계좌번호:\",self.account_number)\n",
    "        print(\"잔고:\", self.잔액)\n",
    "\n",
    "    \n",
    "        \n",
    "p = Account(\"파이썬\", 10000)\n",
    "p.deposit(10000)\n",
    "p.deposit(10000)\n",
    "p.deposit(10000)\n",
    "p.deposit(5000)\n",
    "p.deposit(5000)\n",
    "print(p.잔액)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2a1fc644",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[<__main__.Account object at 0x7fe0f8276700>, <__main__.Account object at 0x7fe0f8276790>, <__main__.Account object at 0x7fe0f82767c0>]\n"
     ]
    }
   ],
   "source": [
    "# 278 여러 객체 생성\n",
    "\n",
    "# Account 클래스로부터 3개 이상 인스턴스를 생성하고 생성된 인스턴스를 리스트에 저장해보세요.\n",
    "\n",
    "\n",
    "import random\n",
    "\n",
    "\n",
    "class Account:\n",
    " \n",
    "    account_count = 0 \n",
    "    \n",
    "    def __init__(self,name,잔액):\n",
    "        self.deposit_count = 0 \n",
    "        self.name = name\n",
    "        self.잔액 = 잔액\n",
    "        self.bank = \"SC은행\"\n",
    "\n",
    "        num1 = random.randint(0,999)\n",
    "        num2 = random.randint(0,99)\n",
    "        num3 = random.randint(0,999999)\n",
    "   \n",
    "        num1 = str(num1).zfill(3)\n",
    "        num2 = str(num2).zfill(2)\n",
    "        num3 = str(num3).zfill(6) \n",
    "        self.account_number = num1 +'-' + num2 +'-' + num3 \n",
    "        \n",
    "        Account.account_count += 1\n",
    "        \n",
    "        \n",
    "    @classmethod   \n",
    "    def get_account_num(cls):\n",
    "        print(cls.account_count)\n",
    "        \n",
    "    def deposit(self,in_num):\n",
    "        self.in_num = in_num\n",
    "        if in_num >= 1 :\n",
    "            self.잔액 += in_num\n",
    "            print(\"{}원이 입금 되었습니다\".format(self.in_num))\n",
    "            \n",
    "            self.deposit_count += 1\n",
    "            if self.deposit_count % 5 == 0:\n",
    "                #이자 자금 \n",
    "                self.잔액 = (self.잔액 * 1.01)\n",
    "            \n",
    "    def withdraw(self,out_num):\n",
    "        self.out_num = out_num\n",
    "        if self.잔액 > out_num:\n",
    "            self.잔액 -= out_num\n",
    "            print(\"{}원이 출금되었습니다\".format(out_num))\n",
    "            \n",
    "        else:\n",
    "            print(\"잔액이 부족합니다\")\n",
    "            \n",
    "    def display_info(self):\n",
    "        print(\"은행이름:\", self.bank)\n",
    "        print(\"예금주:\", self.name)\n",
    "        print(\"계좌번호:\",self.account_number)\n",
    "        print(\"잔고:\", self.잔액)\n",
    "\n",
    "    \n",
    "data = []\n",
    "k = Account(\"kim\", 10000000)\n",
    "l = Account(\"LEE\", 10000)\n",
    "p = Account(\"PARK\", 10000)\n",
    "        \n",
    "data.append(k)\n",
    "data.append(l)\n",
    "data.append(p)\n",
    "\n",
    "print(data)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b3b10f9e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "은행이름: SC은행\n",
      "예금주: kim\n",
      "계좌번호: 424-39-926059\n",
      "잔고: 10000000\n",
      "은행이름: SC은행\n",
      "예금주: LEE\n",
      "계좌번호: 070-90-498712\n",
      "잔고: 50000000\n"
     ]
    }
   ],
   "source": [
    "# 279 객체 순회\n",
    "\n",
    "# 반복문을 통해 리스트에 있는 객체를 순회하면서 잔고가 100만원 이상인 고객의 정보만 출력하세요.\n",
    "\n",
    "import random\n",
    "\n",
    "\n",
    "class Account:\n",
    " \n",
    "    account_count = 0 \n",
    "    \n",
    "    def __init__(self,name,잔액):\n",
    "        self.deposit_count = 0 \n",
    "        self.name = name\n",
    "        self.잔액 = 잔액\n",
    "        self.bank = \"SC은행\"\n",
    "\n",
    "        num1 = random.randint(0,999)\n",
    "        num2 = random.randint(0,99)\n",
    "        num3 = random.randint(0,999999)\n",
    "   \n",
    "        num1 = str(num1).zfill(3)\n",
    "        num2 = str(num2).zfill(2)\n",
    "        num3 = str(num3).zfill(6) \n",
    "        self.account_number = num1 +'-' + num2 +'-' + num3 \n",
    "        \n",
    "        Account.account_count += 1\n",
    "        \n",
    "        \n",
    "    @classmethod   \n",
    "    def get_account_num(cls):\n",
    "        print(cls.account_count)\n",
    "        \n",
    "    def deposit(self,in_num):\n",
    "        self.in_num = in_num\n",
    "        if in_num >= 1 :\n",
    "            self.잔액 += in_num\n",
    "            print(\"{}원이 입금 되었습니다\".format(self.in_num))\n",
    "            \n",
    "            self.deposit_count += 1\n",
    "            if self.deposit_count % 5 == 0:\n",
    "                #이자 자금 \n",
    "                self.잔액 = (self.잔액 * 1.01)\n",
    "            \n",
    "    def withdraw(self,out_num):\n",
    "        self.out_num = out_num\n",
    "        if self.잔액 > out_num:\n",
    "            self.잔액 -= out_num\n",
    "            print(\"{}원이 출금되었습니다\".format(out_num))\n",
    "            \n",
    "        else:\n",
    "            print(\"잔액이 부족합니다\")\n",
    "            \n",
    "    def display_info(self):\n",
    "        print(\"은행이름:\", self.bank)\n",
    "        print(\"예금주:\", self.name)\n",
    "        print(\"계좌번호:\",self.account_number)\n",
    "        print(\"잔고:\", self.잔액)\n",
    "\n",
    "    \n",
    "data = []\n",
    "k = Account(\"kim\", 10000000)\n",
    "l = Account(\"LEE\", 50000000)\n",
    "p = Account(\"PARK\", 10000)\n",
    "        \n",
    "data.append(k)\n",
    "data.append(l)\n",
    "data.append(p)\n",
    "\n",
    "for c in data:\n",
    "    if c.잔액 >= 1000000:\n",
    "        c.display_info()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a8e75385",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100원이 입금 되었습니다!\n",
      "200원이 입금 되었습니다!\n",
      "300원이 입금 되었습니다!\n"
     ]
    }
   ],
   "source": [
    "# 280 입출금 내역\n",
    "\n",
    "# 입금과 출금 내역이 기록되도록 코드를 업데이트 하세요. \n",
    "# 입금 내역과 출금 내역을 출력하는 deposit_history와 withdraw_history 메서드를 추가하세요.\n",
    "\n",
    "import random\n",
    "\n",
    "\n",
    "class Account:\n",
    " \n",
    "    account_count = 0 \n",
    "    \n",
    "    def __init__(self,name,잔액):\n",
    "        self.deposit_count = 0 \n",
    "        self.deposit_log = []\n",
    "        self.withdraw_log = []\n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "        self.name = name\n",
    "        self.잔액 = 잔액\n",
    "        self.bank = \"SC은행\"\n",
    "\n",
    "        num1 = random.randint(0,999)\n",
    "        num2 = random.randint(0,99)\n",
    "        num3 = random.randint(0,999999)\n",
    "   \n",
    "        num1 = str(num1).zfill(3)\n",
    "        num2 = str(num2).zfill(2)\n",
    "        num3 = str(num3).zfill(6) \n",
    "        self.account_number = num1 +'-' + num2 +'-' + num3 \n",
    "        \n",
    "        Account.account_count += 1\n",
    "        \n",
    "        \n",
    "    @classmethod   \n",
    "    def get_account_num(cls):\n",
    "        print(cls.account_count)\n",
    "        \n",
    "    def deposit(self,in_num):\n",
    "        if in_num >= 1 :\n",
    "            self.deposit_log.append(in_num)\n",
    "            self.잔액 += in_num\n",
    "            \n",
    "            \n",
    "            self.deposit_count += 1\n",
    "            if self.deposit_count % 5 == 0:\n",
    "                #이자 자금 \n",
    "                self.잔액 = (self.잔액 * 1.01)\n",
    "            \n",
    "    def withdraw(self,out_num):\n",
    "        if self.잔액 > out_num:\n",
    "            self.deposit_log.append(out_num)\n",
    "            self.잔액 -= out_num\n",
    "            \n",
    "            \n",
    "        else:\n",
    "            print(\"잔액이 부족합니다\")\n",
    "            \n",
    "    def display_info(self):\n",
    "        print(\"은행이름:\", self.bank)\n",
    "        print(\"예금주:\", self.name)\n",
    "        print(\"계좌번호:\",self.account_number)\n",
    "        print(\"잔고:\", self.잔액)\n",
    "\n",
    "    \n",
    "    def deposit_history(self):\n",
    "        for in_num in self.deposit_log:\n",
    "            print(\"{}원이 입금 되었습니다!\".format(in_num))\n",
    "        \n",
    "        \n",
    "    def withdraw_history(self):\n",
    "        for out_num in self.withdraw_log:\n",
    "            print(\"{}원이 출금되었습니다!\".format(out_num))\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "k = Account(\"Kim\", 1000)\n",
    "k.deposit(100)\n",
    "k.deposit(200)\n",
    "k.deposit(300)\n",
    "k.deposit_history()\n",
    "\n",
    "k.withdraw(100)\n",
    "k.withdraw(200)\n",
    "k.withdraw_history()\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "3a74097d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "1000\n"
     ]
    }
   ],
   "source": [
    "# 281 클래스 정의\n",
    "\n",
    "# 다음 코드가 동작하도록 차 클래스를 정의하세요.\n",
    "\n",
    "# >> car = 차(2, 1000)\n",
    "# >> car.바퀴\n",
    "# 2\n",
    "# >> car.가격\n",
    "# 1000\n",
    "\n",
    "\n",
    "class 차:\n",
    "    def __init__(self,바퀴,가격):\n",
    "    \n",
    "        self.바퀴 = 바퀴 \n",
    "        self.가격 = 가격 \n",
    "    \n",
    "car = 차(2,1000)\n",
    "print(car.바퀴)\n",
    "print(car.가격) \n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "791e0cd7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 282 클래스 상속\n",
    "\n",
    "# 차 클래스를 상속받은 자전차 클래스를 정의하세요.\n",
    "\n",
    "class 차:\n",
    "    def __init__(self,바퀴,가격):\n",
    "    \n",
    "        self.바퀴 = 바퀴 \n",
    "        self.가격 = 가격 \n",
    "    \n",
    "class 자전차(차):\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "115c0a21",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "100"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 283 클래스 상속\n",
    "\n",
    "# 다음 코드가 동작하도록 자전차 클래스를 정의하세요. 단 자전차 클래스는 차 클래스를 상속받습니다.\n",
    "\n",
    "class 차:\n",
    "    def __init__(self,바퀴,가격):\n",
    "    \n",
    "        self.바퀴 = 바퀴 \n",
    "        self.가격 = 가격 \n",
    "    \n",
    "class 자전차(차):\n",
    "    pass\n",
    "\n",
    "\n",
    "bicycle = 자전차(2, 100)\n",
    "bicycle.가격"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "e3df08f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'시마노'"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 284 클래스 상속\n",
    "\n",
    "# 다음 코드가 동작하도록 자전차 클래스를 정의하세요. 단 자전차 클래스는 차 클래스를 상속받습니다.\n",
    "\n",
    "class 차:\n",
    "    def __init__(self,바퀴,가격):\n",
    "    \n",
    "        self.바퀴 = 바퀴 \n",
    "        self.가격 = 가격 \n",
    "    \n",
    "class 자전차(차):\n",
    "    def __init__(self,바퀴,가격,구동계):\n",
    "    \n",
    "        self.바퀴 = 바퀴 \n",
    "        self.가격 = 가격\n",
    "        self.구동계 = 구동계\n",
    "        \n",
    "# class 자전차(차):\n",
    "#     def __init__(self, 바퀴, 가격, 구동계):\n",
    "#         super().__init__(바퀴, 가격)\n",
    "#         #차.__init__(self, 바퀴, 가격)\n",
    "#         self.구동계 = 구동계\n",
    "\n",
    "bicycle = 자전차(2, 100, \"시마노\")\n",
    "bicycle.구동계"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "ea903d3d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "바퀴수 4\n",
      "가격 1000\n"
     ]
    }
   ],
   "source": [
    "# 285 클래스 상속\n",
    "\n",
    "# 다음 코드가 동작하도록 차 클래스를 상속받는 자동차 클래스를 정의하세요.\n",
    "\n",
    "class 차:\n",
    "    def __init__(self,바퀴,가격):\n",
    "    \n",
    "        self.바퀴 = 바퀴 \n",
    "        self.가격 = 가격 \n",
    "        \n",
    "        \n",
    "class 자동차(차):\n",
    "    def __init__(self,바퀴,가격):\n",
    "        super().__init__(바퀴,가격)\n",
    "        \n",
    "    def 정보(self): \n",
    "        \n",
    "        print(\"바퀴수 {}\".format(self.바퀴))\n",
    "        print(\"가격 {}\".format(self.가격))\n",
    "        \n",
    "    \n",
    "car = 자동차(4,1000)\n",
    "car.정보()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "66f7ec32",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "바퀴수 2\n",
      "가격 100\n",
      "바퀴수 5\n",
      "가격 200\n"
     ]
    }
   ],
   "source": [
    "# 286 부모 클래스 생성자 호출\n",
    "\n",
    "# 다음 코드가 동작하도록 차 클래스를 수정하세요.\n",
    "\n",
    "\n",
    "class 차:\n",
    "    def __init__(self,바퀴,가격):\n",
    "    \n",
    "        self.바퀴 = 바퀴 \n",
    "        self.가격 = 가격 \n",
    "        \n",
    "    def 정보(self): \n",
    "        \n",
    "        print(\"바퀴수 {}\".format(self.바퀴))\n",
    "        print(\"가격 {}\".format(self.가격))\n",
    "        \n",
    "        \n",
    "class 자동차(차):\n",
    "    def __init__(self,바퀴,가격):\n",
    "        super().__init__(바퀴,가격)\n",
    "        \n",
    "        \n",
    "class 자전차(차):\n",
    "    def __init__(self, 바퀴, 가격, 구동계):\n",
    "        super().__init__(바퀴, 가격)\n",
    "        #차.__init__(self, 바퀴, 가격)\n",
    "        self.구동계 = 구동계\n",
    "\n",
    "        \n",
    "        \n",
    "bicycle = 자전차(2, 100, \"시마노\")\n",
    "bicycle.정보()\n",
    "\n",
    "car = 차(5,200)\n",
    "car.정보()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "8a14241b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "바퀴수 2\n",
      "가격 100\n",
      "구동계 시마노\n"
     ]
    }
   ],
   "source": [
    "# 287 부모 클래스 메서드 호출\n",
    "\n",
    "# 자전차의 정보() 메서드로 구동계 정보까지 출력하도록 수정해보세요.\n",
    "\n",
    "class 차:\n",
    "    def __init__(self,바퀴,가격,구동계):\n",
    "    \n",
    "        self.바퀴 = 바퀴 \n",
    "        self.가격 = 가격 \n",
    "        self.구동계 = 구동계\n",
    "        \n",
    "    def 정보(self): \n",
    "        \n",
    "        print(\"바퀴수 {}\".format(self.바퀴))\n",
    "        print(\"가격 {}\".format(self.가격))\n",
    "        print(\"구동계 {}\".format(self.구동계))\n",
    "        \n",
    "        \n",
    "class 자동차(차):\n",
    "    def __init__(self,바퀴,가격):\n",
    "        super().__init__(바퀴,가격)\n",
    "        \n",
    "        \n",
    "class 자전차(차):\n",
    "    def __init__(self, 바퀴, 가격, 구동계):\n",
    "        super().__init__(바퀴, 가격,구동계)\n",
    "        \n",
    "        \n",
    "        \n",
    "bicycle = 자전차(2, 100, \"시마노\")\n",
    "bicycle.정보()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "f3cb761e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "자식호출\n"
     ]
    }
   ],
   "source": [
    "# 288 메서드 오버라이딩\n",
    "\n",
    "# 다음 코드의 실행 결과를 예상해보세요.\n",
    "\n",
    "\n",
    "class 부모:\n",
    "    def 호출(self):\n",
    "        print(\"부모호출\")\n",
    "\n",
    "class 자식(부모):\n",
    "    def 호출(self):\n",
    "        print(\"자식호출\")\n",
    "        \n",
    "나 = 자식()\n",
    "나.호출()\n",
    "\n",
    "# 자식호출이 나올듯"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "694040a8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "자식생성\n"
     ]
    }
   ],
   "source": [
    "# 289 생성자\n",
    "\n",
    "# 다음 코드의 실행 결과를 예상해보세요.\n",
    "\n",
    "class 부모:\n",
    "    def __init__(self):\n",
    "        print(\"부모생성\")\n",
    "\n",
    "class 자식(부모):\n",
    "    def __init__(self):\n",
    "        print(\"자식생성\")\n",
    "        \n",
    "나 = 자식()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "b679a678",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "자식생성\n",
      "부모생성\n"
     ]
    }
   ],
   "source": [
    "# 290 부모클래스 생성자 호출\n",
    "\n",
    "# 다음 코드의 실행 결과를 예상해보세요.\n",
    "\n",
    "\n",
    "class 부모:\n",
    "    def __init__(self):\n",
    "        print(\"부모생성\")\n",
    "\n",
    "class 자식(부모):\n",
    "    def __init__(self):\n",
    "        print(\"자식생성\")\n",
    "        super().__init__()\n",
    "\n",
    "나 = 자식()\n",
    "\n",
    "# 부모생성?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f4bbfb96",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e2746c63",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28cf7ef3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d70759fe",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d643b868",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "56527965",
   "metadata": {},
   "outputs": [],
   "source": [
    "#  256번 , 260번 , 270번부터 \n",
    "# 283번 꼭 부모클래스의 내용을 한번더 입력해야하나? pass로 적으면 안되는건가?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "729d4489",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
